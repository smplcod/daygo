import React from "react";
import styles from "./TaskList.module.css";

function TaskList({
  tasks,
  onRemoveTask,
  onUpdateTime,
  isPomodoroEnabled,
  pomodoroDuration,
  breakDuration,
}) {
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∞—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç "—á:–º–º"
  const formatDuration = (hours) => {
    const totalMinutes = Math.round(hours * 60);
    const h = Math.floor(totalMinutes / 60);
    const m = totalMinutes % 60;
    return `${h}:${m < 10 ? "0" : ""}${m}`;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —á–∞—Å
  const incrementHours = (index) => {
    onUpdateTime(index, {
      ...tasks[index],
      duration: tasks[index].duration + 1,
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —á–∞—Å
  const decrementHours = (index) => {
    if (tasks[index].duration >= 1) {
      onUpdateTime(index, {
        ...tasks[index],
        duration: tasks[index].duration - 1,
      });
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ 5 –º–∏–Ω—É—Ç
  const incrementMinutes = (index) => {
    const newDuration = tasks[index].duration + 5 / 60;
    onUpdateTime(index, {
      ...tasks[index],
      duration: newDuration,
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ 5 –º–∏–Ω—É—Ç
  const decrementMinutes = (index) => {
    if (tasks[index].duration * 60 >= 5) {
      const newDuration = tasks[index].duration - 5 / 60;
      onUpdateTime(index, {
        ...tasks[index],
        duration: newDuration,
      });
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–∞—á
  const calculateTotalDuration = () => {
    const totalDuration = tasks.reduce((sum, task) => sum + task.duration, 0);
    return formatDuration(totalDuration);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–º–∏–¥–æ—Ä–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏
  const getPomodorosForTask = (duration) => {
    return Math.floor(duration / (pomodoroDuration + breakDuration));
  };
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —Å —ç–º–æ–¥–∑–∏ –ø–æ–º–∏–¥–æ—Ä–æ–≤
  const renderPomodoros = (duration) => {
    const pomodoroCount = getPomodorosForTask(duration * 60);
    return `${"üçÖ".repeat(pomodoroCount)} ${pomodoroCount}`;
  };

  const totalDuration = calculateTotalDuration();

  return (
    <table style={{ width: "100%", textAlign: "left" }}>
      <tbody>
        <tr>
          <th>–ó–∞–¥–∞—á–∞</th>
          <th colSpan="3">–í—Ä–µ–º—è</th>
          <th>–ü–æ–º–∏–¥–æ—Ä—ã</th>
        </tr>
        {tasks.map((task, index) => (
          <tr key={index}>
            <td>
              <span
                onClick={() => onRemoveTask(index)}
                style={{ cursor: "pointer" }}
              >
                ‚ùå
              </span>
              {task.name}
            </td>
            <td>
              <div>
                <button
                  onClick={() => incrementHours(index)}
                  className={styles.buttonSmall}
                >
                  +
                </button>
              </div>
              <div>
                <button
                  onClick={() => decrementHours(index)}
                  disabled={task.duration < 1}
                  className={styles.buttonSmall}
                >
                  -
                </button>
              </div>
            </td>
            <td>{formatDuration(task.duration)}</td>
            <td>
              <div>
                <button
                  onClick={() => incrementMinutes(index)}
                  className={styles.buttonSmall}
                >
                  +
                </button>
              </div>
              <div>
                <button
                  onClick={() => decrementMinutes(index)}
                  disabled={task.duration * 60 < 5}
                  className={styles.buttonSmall}
                >
                  -
                </button>
              </div>
            </td>
            <td>{isPomodoroEnabled ? renderPomodoros(task.duration) : ""}</td>
          </tr>
        ))}
      </tbody>
    </table>
  );
}

export default TaskList;
